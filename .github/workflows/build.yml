name: Automated Builds

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

defaults:
  run:
    # This otherwise gets run under dash which does not support brace expansion
    shell: bash

jobs:
  # We'll only package the plugins with an entry in bundler.toml
  package:
    strategy:
      matrix:
        include:
          - { name: ubuntu, os: ubuntu-latest, cross-target: "" }
          - { name: macos, os: macos-latest, cross-target: "" }
          - { name: windows, os: windows-latest, cross-target: "" }
    name: Package plugin binaries
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libgl-dev libjack-dev libxcb1-dev libxcb-icccm4-dev libxcursor-dev libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Setup macOS x86_64 target
        if: startsWith(matrix.os, 'macos')
        run: rustup target add x86_64-apple-darwin
      - name: Package all targets from bundler.toml
        # Instead of hardcoding which targets to build and package, we'll
        # package everything that's got en entry in the `bundler.toml` file
        run: |
          # Building can be sped up by specifying all packages in one go
          package_args=()
          for package in $(cargo xtask known-packages); do
            package_args+=("-p" "$package")
          done

          runner_name=${{ matrix.name }}
          if [[ $runner_name = 'macos-universal' ]]; then
            export MACOSX_DEPLOYMENT_TARGET=13.7
            cargo xtask bundle-universal "${package_args[@]}" --release
          else
            cross_target=${{ matrix.cross-target }}
            cargo xtask bundle "${package_args[@]}" --release
          fi

      - name: Determine build archive name
        run: |
          # Windows (usually) doesn't like colons in file names
          echo "ARCHIVE_NAME=nih-plugs-$(date -u +"%Y-%m-%d-%H%m%S")-${{ matrix.name }}" >> "$GITHUB_ENV"
      - name: Move all packaged plugin into a directory
        run: |
          # GitHub Action strips the top level directory, great, have another one
          mkdir -p "$ARCHIVE_NAME/$ARCHIVE_NAME"
          mv target/bundled/* "$ARCHIVE_NAME/$ARCHIVE_NAME"
      - name: Add an OS-specific readme file with installation instructions
        run: cp ".github/workflows/readme-${{ runner.os }}.txt" "$ARCHIVE_NAME/$ARCHIVE_NAME/README.txt"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}
