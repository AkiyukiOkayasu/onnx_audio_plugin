name: Automated Builds

on:
  release:
    types: [published]

env:
  PACKAGE_ARG: onnx_audio_plugin
  PLUGIN_NAME: ONNX_Audio_Plugin
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

defaults:
  run:
    # This otherwise gets run under dash which does not support brace expansion
    shell: bash

jobs:
  # We'll only package the plugins with an entry in bundler.toml
  package:
    strategy:
      matrix:
        include:
          - { name: ubuntu, os: ubuntu-latest, cross-target: "" }
          - {
              name: macos-universal,
              os: macos-latest,
              cross-target: aarch64-apple-darwin,
            }
          - { name: windows, os: windows-latest, cross-target: "" }
    name: Package plugin binaries
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libgl-dev libjack-dev libxcb1-dev libxcb-icccm4-dev libxcursor-dev libxkbcommon-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Setup Rust nightly
        run: rustup override set nightly
      - name: Package all targets from bundler.toml
        # Instead of hardcoding which targets to build and package, we'll
        # package everything that's got en entry in the `bundler.toml` file
        run: |
          runner_name=${{ matrix.name }}
          if [[ $runner_name = 'macos-universal' ]]; then
            # The macOS AArch64/universal build is done from an x86_64 macOS CI
            # runner, so it needs to be cross compiled
            rustup target add aarch64-apple-darwin
            export MACOSX_DEPLOYMENT_TARGET=11.0
            cargo xtask bundle-universal $PACKAGE_ARG --release
          else
            cross_target=${{ matrix.cross-target }}
            if [[ -n $cross_target ]]; then
              package_args+=("--target" "$cross_target")
            fi

            cargo xtask bundle $PACKAGE_ARG --release
          fi

      - name: Determine build archive name
        run: |
          echo "ARCHIVE_NAME=$PLUGIN_NAME-${{ matrix.name }}" >> "$GITHUB_ENV"
      - name: Move all packaged plugin into a directory
        run: |
          # GitHub Action strips the top level directory, great, have another one
          mkdir -p "$ARCHIVE_NAME/$ARCHIVE_NAME"
          mv target/bundled/* "$ARCHIVE_NAME/$ARCHIVE_NAME"
      - name: Add an OS-specific readme file with installation instructions
        run: cp ".github/workflows/readme-${{ runner.os }}.txt" "$ARCHIVE_NAME/$ARCHIVE_NAME/README.txt"
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}
